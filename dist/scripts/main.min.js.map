{"version":3,"sources":["main.js"],"names":["init","renderer","THREE","WebGLRenderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","autoClear","setClearColor","document","getElementById","appendChild","domElement","scene","Scene","camera","PerspectiveCamera","position","z","add","circle","Object3D","skelet","particle","geom","TetrahedronGeometry","IcosahedronGeometry","geom2","mat","MeshPhongMaterial","color","shading","FlatShading","mat2","wireframe","side","DoubleSide","planet","Mesh","scale","x","y","planet2","ambientLight","AmbientLight","lights","DirectionalLight","set","addEventListener","onWindowResize","aspect","updateProjectionMatrix","animate","requestAnimationFrame","rotation","clear","render","composer","onload"],"mappings":"AAOA,QAAAA,QACAC,SAAA,GAAAC,OAAAC,eAAAC,WAAA,EAAAC,OAAA,IACAJ,SAAAK,cAAAC,OAAA,iBAAAA,OAAAC,iBAAA,GACAP,SAAAQ,QAAAF,OAAAG,WAAAH,OAAAI,aACAV,SAAAW,WAAA,EACAX,SAAAY,cAAA,EAAA,GACAC,SAAAC,eAAA,UAAAC,YAAAf,SAAAgB,YAEAC,MAAA,GAAAhB,OAAAiB,MAEAC,OAAA,GAAAlB,OAAAmB,kBAAA,GAAAd,OAAAG,WAAAH,OAAAI,YAAA,EAAA,KACAS,OAAAE,SAAAC,EAAA,IACAL,MAAAM,IAAAJ,QAEAK,OAAA,GAAAvB,OAAAwB,SACAC,OAAA,GAAAzB,OAAAwB,SACAE,SAAA,GAAA1B,OAAAwB,SAEAR,MAAAM,IAAAC,QACAP,MAAAM,IAAAG,QACAT,MAAAM,IAAAI,SAEA,IACAC,IADA,GAAA3B,OAAA4B,oBAAA,EAAA,GACA,GAAA5B,OAAA6B,oBAAA,EAAA,IAEAC,EAAA,GAAA9B,OAAA6B,oBAAA,GAAA,GAgBAE,EAAA,GAAA/B,OAAAgC,mBACAC,MAAA,SACAC,QAAAlC,MAAAmC,cAGAC,EAAA,GAAApC,OAAAgC,mBACAC,MAAA,SACAI,WAAA,EACAC,KAAAtC,MAAAuC,aAIAC,EAAA,GAAAxC,OAAAyC,KAAAd,EAAAI,EACAS,GAAAE,MAAAC,EAAAH,EAAAE,MAAAE,EAAAJ,EAAAE,MAAArB,EAAA,GACAE,OAAAD,IAAAkB,EAEA,IAAAK,GAAA,GAAA7C,OAAAyC,KAAAX,EAAAM,EACAS,GAAAH,MAAAC,EAAAE,EAAAH,MAAAE,EAAAC,EAAAH,MAAArB,EAAA,GACAI,OAAAH,IAAAuB,EAEA,IAAAC,GAAA,GAAA9C,OAAA+C,aAAA,SACA/B,OAAAM,IAAAwB,EAEA,IAAAE,KACAA,GAAA,GAAA,GAAAhD,OAAAiD,iBAAA,MAAA,GACAD,EAAA,GAAA5B,SAAA8B,IAAA,EAAA,EAAA,GACAF,EAAA,GAAA,GAAAhD,OAAAiD,iBAAA,IAAA,GACAD,EAAA,GAAA5B,SAAA8B,IAAA,IAAA,EAAA,IACAF,EAAA,GAAA,GAAAhD,OAAAiD,iBAAA,SAAA,GACAD,EAAA,GAAA5B,SAAA8B,YAAA,IACAlC,MAAAM,IAAA0B,EAAA,IACAhC,MAAAM,IAAA0B,EAAA,IACAhC,MAAAM,IAAA0B,EAAA,IAGA3C,OAAA8C,iBAAA,SAAAC,gBAAA,GAIA,QAAAA,kBACAlC,OAAAmC,OAAAhD,OAAAG,WAAAH,OAAAI,YACAS,OAAAoC,yBACAvD,SAAAQ,QAAAF,OAAAG,WAAAH,OAAAI,aAGA,QAAA8C,WACAC,sBAAAD,SAEA7B,SAAA+B,SAAAd,GAAA,EACAjB,SAAA+B,SAAAb,GAAA,KACArB,OAAAkC,SAAAd,GAAA,KACApB,OAAAkC,SAAAb,GAAA,KACAnB,OAAAgC,SAAAd,GAAA,KACAlB,OAAAgC,SAAAb,GAAA,KACA7C,SAAA2D,QAEA3D,SAAA4D,OAAA3C,MAAAE,QAxGA,GAAAnB,UAAAiB,MAAAE,OAAA0C,SAAArC,OAAAE,OAAAC,QAEArB,QAAAwD,OAAA,WACA/D,OACAyD","file":"main.min.js","sourcesContent":["var renderer, scene, camera, composer, circle, skelet, particle;\r\n\r\n          window.onload = function() {\r\n            init();\r\n            animate();\r\n          }\r\n\r\n          function init() {\r\n            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n            renderer.setPixelRatio((window.devicePixelRatio) ? window.devicePixelRatio : 1);\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.autoClear = false;\r\n            renderer.setClearColor(0x000000, 0.0);\r\n            document.getElementById('canvas').appendChild(renderer.domElement);\r\n\r\n            scene = new THREE.Scene();\r\n\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1000);\r\n            camera.position.z = 400;\r\n            scene.add(camera);\r\n\r\n            circle = new THREE.Object3D();\r\n            skelet = new THREE.Object3D();\r\n            particle = new THREE.Object3D();\r\n\r\n            scene.add(circle);\r\n            scene.add(skelet);\r\n            scene.add(particle);\r\n\r\n            var geometry = new THREE.TetrahedronGeometry(2, 0);\r\n            var geom = new THREE.IcosahedronGeometry(7, 1);\r\n            //var geom2 = new THREE.IcosahedronGeometry(15, 1);  //this was orignal\r\n            var geom2 = new THREE.IcosahedronGeometry(15, 1);\r\n\r\n           /* var material = new THREE.MeshPhongMaterial({\r\n    color: 0xffffff,\r\n    shading: THREE.FlatShading\r\n  });\r\n            \r\n            for (var i = 0; i < 1000; i++) {\r\n    var mesh = new THREE.Mesh(geometry, material);\r\n    mesh.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\r\n    mesh.position.multiplyScalar(90 + (Math.random() * 700));\r\n    mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);\r\n    particle.add(mesh);\r\n  }\r\n            */\r\n\r\n            var mat = new THREE.MeshPhongMaterial({\r\n              color: 0xffffff,\r\n              shading: THREE.FlatShading\r\n            });\r\n\r\n            var mat2 = new THREE.MeshPhongMaterial({\r\n              color: 0xffffff,\r\n              wireframe: true,\r\n              side: THREE.DoubleSide\r\n\r\n            }); \r\n\r\n            var planet = new THREE.Mesh(geom, mat);\r\n            planet.scale.x = planet.scale.y = planet.scale.z = 16;\r\n            circle.add(planet);\r\n\r\n            var planet2 = new THREE.Mesh(geom2, mat2);\r\n            planet2.scale.x = planet2.scale.y = planet2.scale.z = 10;\r\n            skelet.add(planet2);\r\n\r\n            var ambientLight = new THREE.AmbientLight(0x999999 );\r\n            scene.add(ambientLight);\r\n            \r\n            var lights = [];\r\n          lights[0] = new THREE.DirectionalLight( 0x00eaff, 1 );\r\n          lights[0].position.set( 1, 0, 0 );\r\n          lights[1] = new THREE.DirectionalLight( 0x000080, 1 );//0x00eaff\r\n          lights[1].position.set( 0.75, 1, 0.5 );\r\n          lights[2] = new THREE.DirectionalLight( 0xff6b00, 1 ); //0x000080,\r\n          lights[2].position.set( -0.75, -1, 0.5 );\r\n          scene.add( lights[0] );\r\n          scene.add( lights[1] );\r\n          scene.add( lights[2] );\r\n            \r\n\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n          };\r\n\r\n          function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n          }\r\n\r\n          function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            particle.rotation.x += 0.0000;\r\n            particle.rotation.y -= 0.0040;\r\n            circle.rotation.x -= 0.0020;\r\n            circle.rotation.y -= 0.0030;\r\n            skelet.rotation.x -= 0.0010;\r\n            skelet.rotation.y += 0.0020;\r\n            renderer.clear();\r\n\r\n            renderer.render( scene, camera )\r\n          };\r\n   "]}